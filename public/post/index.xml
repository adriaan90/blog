<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Adriaan&#39;s blog</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 04 Sep 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>My recording gear</title>
      <link>/post/my-gear/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/my-gear/</guid>
      <description>


&lt;p&gt;&lt;strong&gt;Disclaimer: The Amazon links are affiliate links and the comission that I receive when you use one of my links will go towards improving my Youtube channel. Thanks for your support!&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;recording-gear&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Recording gear:&lt;/h2&gt;
&lt;p&gt;ðŸ“· Sony a6000: &lt;a href=&#34;https://amzn.to/31ZXRM8&#34; class=&#34;uri&#34;&gt;https://amzn.to/31ZXRM8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ðŸ’» HP EliteBook 830 G6: &lt;a href=&#34;https://amzn.to/3hZ5OGY&#34; class=&#34;uri&#34;&gt;https://amzn.to/3hZ5OGY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ðŸŽ¤ Samson Meteor mic: &lt;a href=&#34;https://amzn.to/3h1FnyO&#34; class=&#34;uri&#34;&gt;https://amzn.to/3h1FnyO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ðŸŽ¬ Video capture card: &lt;a href=&#34;https://amzn.to/2F39uJc&#34; class=&#34;uri&#34;&gt;https://amzn.to/2F39uJc&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;software&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Software&lt;/h2&gt;
&lt;p&gt;ðŸ‘¾ Jupyter Notebook: &lt;a href=&#34;https://jupyter.org/install&#34; class=&#34;uri&#34;&gt;https://jupyter.org/install&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ðŸ‘¾ Open Broadcast Software: &lt;a href=&#34;https://obsproject.com/&#34; class=&#34;uri&#34;&gt;https://obsproject.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ðŸ‘¾ DaVinci Resolve 16: &lt;a href=&#34;https://www.blackmagicdesign.com/uk/products/davinciresolve/&#34; class=&#34;uri&#34;&gt;https://www.blackmagicdesign.com/uk/products/davinciresolve/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ideal Rankine Cycle with feedwater heater calculations</title>
      <link>/post/ideal-rankine-cycle-with-regen/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/ideal-rankine-cycle-with-regen/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The content of this post is based on the video:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pWCvllVFNHQ&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;div style=&#34;text-align: left;&#34;&gt;

&lt;div id=&#34;the-problem&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The problem&lt;/h3&gt;
&lt;p&gt;Consider a regenerative cycle using steam as the working fluid. Steam leaves the boiler and enters the turbine at 4 MPa, 400&lt;span class=&#34;math inline&#34;&gt;\(^\circ\)&lt;/span&gt;C. After expansion to 400 kPa, some of the steam is extracted from the turbine to heat the feedwater in an open FWH. The pressure in the FWH is 400 kPa, and the water leaving it is saturated liquid at 400 kPa. The steam not extracted expands to 10 kPa. Determine the cycle efficiency.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/Ideal-Rankine-Cycle-with-regen/index_files/Rankine-cycle-regen.PNG&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Looking at the mass flow of steam entering and exiting the turbine:
&lt;span class=&#34;math display&#34;&gt;\[y = \dot{m}_6/\dot{m}_5\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;and thus &lt;span class=&#34;math inline&#34;&gt;\(\dot{m}_6\)&lt;/span&gt; can be written as a function of &lt;span class=&#34;math inline&#34;&gt;\(\dot{m}_5\)&lt;/span&gt;:
&lt;span class=&#34;math display&#34;&gt;\[\dot{m}_6 = y\dot{m}_5\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Similarly &lt;span class=&#34;math inline&#34;&gt;\(\dot{m}_7\)&lt;/span&gt; can be written as:
&lt;span class=&#34;math display&#34;&gt;\[\dot{m}_7=(1-y)\dot{m}_5\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;and
&lt;span class=&#34;math display&#34;&gt;\[\dot{m}_7=(1-y)\dot{m}_5=\dot{m}_1=\dot{m}_2\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;initiate-pyromat-and-configure-its-units&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Initiate &lt;em&gt;PYroMat&lt;/em&gt; and configure its units:&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pyromat as pm
import numpy as np

pm.config[&amp;quot;unit_pressure&amp;quot;] = &amp;quot;kPa&amp;quot;
pm.config[&amp;quot;def_p&amp;quot;] = 100

mp_water = pm.get(&amp;quot;mp.H2O&amp;quot;) # &amp;lt;-- for multi-phase water properties&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To solve this problem we consider a control surface around the pump, the boiler, the turbine, and the condenser.&lt;/p&gt;
&lt;p&gt;First, let us consider the &lt;strong&gt;low pressure pump&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;p1 = 10 # &amp;lt;-- given
p2 = 400 # &amp;lt;-- given

v1 = 1/mp_water.ds(p=p1)[0]

w_pump1 = v1*(p2-p1)
h2 = h1+w_pump1
print(f&amp;quot;Work required by pump 1: {round(float(w_pump1),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Work required by pump 1: 0.4 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, letâ€™s consider &lt;strong&gt;the turbine&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;p5 = 4000 # &amp;lt;-- given
T5 = 400+273.15 # K &amp;lt;-- given
h5 = mp_water.h(p=p5, T=T5)
s5 = mp_water.s(p=p5, T=T5)

s6 =s5
p6 = 400 # &amp;lt;-- given
T6, x6 = mp_water.T_s(s=s6, p=p6, quality=True)
h6 = mp_water.h(x=x6, p=p6)

print(f&amp;quot;Quality of bled steam: {round(float(x6),4)}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Quality of bled steam: 0.9757&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, letâ€™s consider the &lt;strong&gt;feedwater heater&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;p3 = 400 # &amp;lt;-- given
h3 = mp_water.hs(p=p3)[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The energy conservation equation for the FWH is: &lt;span class=&#34;math display&#34;&gt;\[y(h_6)+(1-y)h_2 = h_3\]&lt;/span&gt;
This can be re-arranged to solve &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; explicitly: &lt;span class=&#34;math display&#34;&gt;\[y = \frac{h_2 - h_3}{h_2 - h_6}\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;y = (h2-h3)/(h2-h6)
print(f&amp;quot;y = {round(float(y),4)}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;y = 0.1654&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now calculate the work extracted by the turbine:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;p7 = p1
s7 = s5
T7, x7 = mp_water.T_s(s=s7, p=p7, quality=True)
h7 = mp_water.h(x=x7, p=p7)
w_t = h5 - y*h6 - (1-y)*h7
print(f&amp;quot;Work generated by turbine: {round(float(w_t),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Work generated by turbine: 980.4 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, letâ€™s consider the high pressure pump:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;p4 = 4000 # &amp;lt;-- given
v3 = 1/mp_water.ds(p=p3)[0]
w_pump2 = v3*(p4-p3)
print(f&amp;quot;Work required by pump 2: {round(float(w_pump2),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Work required by pump 2: 3.9 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can consider the &lt;strong&gt;boiler&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;h4 = h3 + w_pump2
q_H = h5-h4
print(f&amp;quot;Heat input by boiler: {round(float(q_H),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Heat input by boiler: 2605.9 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now calculate the thermal efficiency with &lt;span class=&#34;math display&#34;&gt;\[\eta_{th}=\frac{w_{net}}{q_H}\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;eta_th = (w_t - w_pump1*(1-y) - w_pump2)/q_H*100
print(f&amp;quot;Thermal efficiency is: {round(float(eta_th),2)}%&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Thermal efficiency is: 37.46%&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ideal Rankine Cycle with reheat calculations</title>
      <link>/post/ideal-rankine-cycle-with-reheat/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/post/ideal-rankine-cycle-with-reheat/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The content of this post is based on the video:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/qGvLk6XqcVQ&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;div style=&#34;text-align: left;&#34;&gt;

&lt;div id=&#34;the-problem&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The problem&lt;/h3&gt;
&lt;p&gt;Consider a reheat cycle utilizing steam. Steam leaves the boiler and enters the turbine at 4 MPa, 400&lt;span class=&#34;math inline&#34;&gt;\(^\circ\)&lt;/span&gt;C. After expansion in the turbine to 400 kPa, the steam is reheated to 400&lt;span class=&#34;math inline&#34;&gt;\(^\circ\)&lt;/span&gt;C and then expanded in the low-pressure turbine to 10 kPa. Determine the cycle efficiency.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/Ideal-Rankine-Cycle-with-reheat/index_files/Rankine-cycle-reheat.PNG&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;initiate-pyromat-and-configure-its-units&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Initiate &lt;em&gt;PYroMat&lt;/em&gt; and configure its units:&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pyromat as pm

pm.config[&amp;quot;unit_pressure&amp;quot;] = &amp;quot;kPa&amp;quot;
pm.config[&amp;quot;def_p&amp;quot;] = 100

mp_water = pm.get(&amp;quot;mp.H2O&amp;quot;) # &amp;lt;-- for multi-phase water properties&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To solve this problem we consider a control surface around the pump, the boiler, the turbine, and the condenser.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-pump&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The pump&lt;/h3&gt;
&lt;p&gt;First, consider the pump:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#saturated liquid, thus x = 0
p1 = 10
s1 = mp_water.ss(p=p1)[0]
T1 = mp_water.Ts(p=p1)[0]

p2 = 4000
s2 = s1
T2 = mp_water.T_h(h=h2,p=p2)

h2dash = mp_water.hs(p=p2)[0]
s2dash = mp_water.ss(p=p2)[0]
T2dash = mp_water.Ts(p=p2)[0]

h3dash = mp_water.hs(p=p2)[1]
s3dash = mp_water.ss(p=p2)[1]
T3dash = T2dash

v = 1/mp_water.ds(p=p1)[0]

w_p = v*(p2-p1)

print(f&amp;quot;Specific volume: {round(float(v),5)} m^3/kg&amp;quot;)
print(f&amp;quot;Work required by pump: {round(float(w_p),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Specific volume: 0.00101 m^3/kg
Work required by pump: 4.0 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;h1 = mp_water.hs(p=p1)[0]
h2 = h1+w_p
print(f&amp;quot;h2 = {round(float(h2),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;h2 = 195.8 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-hp-turbine&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The HP turbine&lt;/h3&gt;
&lt;p&gt;Next, letâ€™s consider the high pressure turbine:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;p3 = p2
T3 = 400 + 273.15
h3 = mp_water.h(p=p3, T=T3)
s3 = mp_water.s(p=p3, T=T3)

p4 = 400
s4 = s3
T4, x4 = mp_water.T_s(s=s4, p=p4, quality=True)
h4 = mp_water.h(x=x4, p=p4)

w_HPt = h3-h4

print(f&amp;quot;Quality of intermediate pressure steam: {round(float(x4),4)}&amp;quot;)
print(f&amp;quot;Work generated by HP turbine: {round(float(w_HPt),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Quality of intermediate pressure steam: 0.9757
Work generated by HP turbine: 528.2 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-lp-turbine&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The LP turbine&lt;/h3&gt;
&lt;p&gt;Now, we consider the low pressure turbine:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;p5 = p4
T5 = 400 + 273.15 
h5 = mp_water.h(p=p5, T=T5)
s5 = mp_water.s(p=p5, T=T5)

p6 = p1
s6 = s5

T6, x6 = mp_water.T_s(s=s6, p=p6, quality=True)
h6 = mp_water.h(x=x6, p=p6)

w_LPt = h5-h6

print(f&amp;quot;Quality of low pressure steam: {round(float(x6),4)}&amp;quot;)
print(f&amp;quot;Work generated by LP turbine: {round(float(w_LPt),1)} kJ/kg&amp;quot;)
print(f&amp;quot;Total work output by turbine: {round(float(w_HPt+w_LPt),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Quality of low pressure steam: 0.9669
Work generated by LP turbine: 769.3 kJ/kg
Total work output by turbine: 1297.5 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-boiler&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The boiler&lt;/h3&gt;
&lt;p&gt;Next, letâ€™s consider the boiler:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;q_H = (h3-h2)+(h5-h4)
print(f&amp;quot;Heat input by boiler: {round(float(q_H),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Heat input by boiler: 3606.2 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-condenser&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The condenser&lt;/h3&gt;
&lt;p&gt;Finally, we consider the condenser:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;q_L = h6-h1
print(f&amp;quot;Heat rejected by the condenser: {round(float(q_L),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Heat rejected by the condenser: 2312.8 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;calculating-the-thermal-efficiency&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Calculating the thermal efficiency&lt;/h3&gt;
&lt;p&gt;We can now calculate the thermal efficiency with &lt;span class=&#34;math display&#34;&gt;\[\eta_{th}=\frac{w_{net}}{q_H}\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;eta_th = (w_HPt+w_LPt-w_p)/q_H*100
print(f&amp;quot;Thermal efficiency is: {round(float(eta_th),1)}%&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Thermal efficiency is: 35.9%&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-rankine-cycle-on-a-graph&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Rankine cycle on a graph&lt;/h3&gt;
&lt;p&gt;Once all the values have been calculated, the ideal Rankine Cycle can be shown visually with the use of a graph.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
import matplotlib.pyplot as plt

p = np.linspace(1,22063,1000)
T = mp_water.Ts(p=p)
s = mp_water.ss(p=p)


font = {&amp;#39;family&amp;#39; : &amp;#39;Times New Roman&amp;#39;,
        &amp;#39;size&amp;#39;   : 22}


plt.figure(figsize=(15,10))
plt.title(&amp;#39;Ideal Rankine Cycle T-s Diagram&amp;#39;)
plt.rc(&amp;#39;font&amp;#39;, **font)
plt.plot(s[0],T, &amp;#39;b--&amp;#39;)
plt.plot(s[1],T,&amp;#39;r--&amp;#39;)
plt.ylabel(&amp;#39;Temperature (K)&amp;#39;)
plt.xlabel(&amp;#39;Entropy (s)&amp;#39;)
plt.xlim(-2,10)
#plt.ylim(200,800)
plt.plot([s1, s2, s2dash, s3dash, s3, s4, s5, s6, s1],[T1, T2, T2dash, T3dash, T3, T4, T5, T6, T1], &amp;#39;black&amp;#39;)

plt.text(s1-.1,T1,f&amp;#39;(1)\nT = {round(float(T1),2)} K\nh = {round(float(h1),1)} kJ/kg\n s = {round(float(s1),3)} kJ/kgK&amp;#39;,
    ha=&amp;#39;right&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
plt.text(1.6,330,f&amp;#39;(2)\nT = {round(float(T2),2)} K\nh = {round(float(h2),1)} kJ/kg&amp;#39;,
    ha=&amp;#39;left&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
plt.text(s2dash-.15,T2dash,f&amp;quot;(2&amp;#39;)\nT = {round(float(T2dash),2)} K\nh = {round(float(h2dash),1)} kJ/kg \ns = {round(float(s2dash),3)} kJ/kgK&amp;quot;,
    ha=&amp;#39;right&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
plt.text(s3dash-.1,T3dash-60,f&amp;quot;(3&amp;#39;)\nh = {round(float(h3dash),1)} kJ/kg \ns = {round(float(s3dash),3)} kJ/kgK&amp;quot;,
    ha=&amp;#39;right&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
plt.text(6.3,T3-50,f&amp;#39;(3)\nT = {round(float(T3),2)} K\nh = {round(float(h3),1)} kJ/kg&amp;#39;,
    ha=&amp;#39;right&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
plt.text(s4-.1,T4-80,f&amp;#39;(4)\nT = {round(float(T4),2)} K\nh = {round(float(h4),1)} kJ/kg \ns = {round(float(s4),3)} kJ/kgK\nx = {round(float(x4),3)}&amp;#39;,
    ha=&amp;#39;right&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
plt.text(s5+.1,T5-70,f&amp;#39;(5)\nT = {round(float(T4),2)} K\nh = {round(float(h4),1)} kJ/kg \ns = {round(float(s4),3)} kJ/kgK&amp;#39;,
    ha=&amp;#39;left&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
plt.text(s6+.1,T6,f&amp;#39;(6)\nT = {round(float(T4),2)} K\nh = {round(float(h4),1)} kJ/kg \nx = {round(float(x6),3)}&amp;#39;,
    ha=&amp;#39;left&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Ideal-Rankine-Cycle-with-reheat/index_files/output_18_1.png&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ideal Rankine Cycle calculations</title>
      <link>/post/ideal-rankine-cycle/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/post/ideal-rankine-cycle/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The content of this post is based on the video:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/U4t1CBDMlmg&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;div style=&#34;text-align: left;&#34;&gt;

&lt;div id=&#34;the-problem&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The problem&lt;/h3&gt;
&lt;p&gt;Consider the following question:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Determine the efficiency of a Rankine cycle using steam as the working fluid in which the condenser pressure is 10 kPa. The boiler pressure is 2 MPa. The steam leaves the boiler as saturated vapor.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/Ideal-Rankine-Cycle/index_files/Rankine-cycle-reheat.PNG&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;initiate-pyromat-and-configure-its-units&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Initiate &lt;em&gt;PYroMat&lt;/em&gt; and configure its units:&lt;/h3&gt;
&lt;p&gt;The first thing that we need to do before we start with solving the problem, is to import the necessary packages and configure PYroMat to use the correct units:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pyromat as pm

pm.config[&amp;quot;unit_pressure&amp;quot;] = &amp;quot;kPa&amp;quot;
pm.config[&amp;quot;def_p&amp;quot;] = 100

mp_water = pm.get(&amp;quot;mp.H2O&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To determine the cycle efficiency, we must calculate the turbine work, the pump work, and the heat transfer to the steam in the boiler. We do this by considering a control surface around each of these components in turn. In each case the thermodynamic model is the steam tables, and the process is steady state with negligible changes in kinetic and potential energies.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-pump&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The pump&lt;/h3&gt;
&lt;p&gt;First, consider the pump:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#saturated liquid, thus x = 0
p1 = 10 # &amp;lt;--given
T1 = mp_water.Ts(p=p1)[0]
s1 = mp_water.ss(p=p1)[0]
p2 = 2000 # &amp;lt;--given and converted to kPa
s2= s1
v = 1/mp_water.ds(p=p1)[0]

w_p = v*(p2-p1)
print(f&amp;quot;Work required by pump: {round(float(w_p),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Work required by pump: 2.0 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the work required by the pump is calculated, the enthalpy value after the pump (point 2) can be calculated:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;h1 = mp_water.hs(p=p1)[0]
h2 = h1+w_p
T2 = mp_water.T_h(p=p2,h=h2)

print(f&amp;quot;h2 = {round(float(h2),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;h2 = 193.8 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-boiler&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The boiler&lt;/h3&gt;
&lt;p&gt;Next, lets consider the boiler:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# steam leaves the boiler as saturated vapor, thus x = 1
p3 = p2
T3 = mp_water.Ts(p=p3)

h3 = mp_water.hs(p=p3)[1]
s3dash = mp_water.ss(p=p3)[0]
T3dash = T3
s3 = mp_water.ss(p=p3)[1]
q_H = h3-h2

print(f&amp;quot;Heat input by boiler: {round(float(q_H),1)} kJ/kg&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Heat input by boiler: 2604.5 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-turbine&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The turbine&lt;/h3&gt;
&lt;p&gt;Now, we consider the turbine:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;p4 = p1
s4 = s3
T4, x = mp_water.T_s(s=s4,p=p4, quality=True)
h4 = mp_water.h(p=p4,x=x)
w_t = h3-h4
print(f&amp;quot;Quality of low pressure steam: {round(float(x),4)}&amp;quot;)
print(f&amp;quot;Work generated by turbine: {round(float(w_t),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Quality of low pressure steam: 0.7587
Work generated by turbine: 791.7 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-condenser&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The condenser&lt;/h3&gt;
&lt;p&gt;Finally, we consider the condenser:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;q_L = h4-h1
print(f&amp;quot;Heat rejected by the condenser: {round(float(q_L),1)} kJ/kg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Heat rejected by the condenser: 1814.8 kJ/kg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;thermal-efficiency&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Thermal efficiency&lt;/h3&gt;
&lt;p&gt;We can now calculate the thermal efficiency with &lt;span class=&#34;math display&#34;&gt;\[\eta_{th}=\frac{w_{net}}{q_H}\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;eta_th = (w_t-w_p)/q_H*100
print(f&amp;quot;Thermal efficiency is: {round(float(eta_th),1)}%&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;cmd&#34;&gt;&lt;code&gt;Thermal efficiency is: 30.3%&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-the-ideal-rankine-cycle&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting the Ideal Rankine Cycle&lt;/h3&gt;
&lt;p&gt;After all the points have been calculated, the Rankine Cycle can be shown visually on a graph.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
import matplotlib.pyplot as plt

p = np.linspace(1,22063,1000)
T = mp_water.Ts(p=p)
s = mp_water.ss(p=p)


font = {&amp;#39;family&amp;#39; : &amp;#39;Times New Roman&amp;#39;,
        &amp;#39;size&amp;#39;   : 22}


plt.figure(figsize=(15,10))
plt.title(&amp;#39;Ideal Rankine Cycle T-s Diagram&amp;#39;)
plt.rc(&amp;#39;font&amp;#39;, **font)
plt.plot(s[0],T, &amp;#39;b--&amp;#39;)
plt.plot(s[1],T,&amp;#39;r--&amp;#39;)
plt.ylabel(&amp;#39;Temperature (K)&amp;#39;)
plt.xlabel(&amp;#39;Entropy (s)&amp;#39;)
plt.plot([s1, s2, s3dash, s3, s4, s1],[T1, T2, T3dash, T3, T4, T1], &amp;#39;black&amp;#39;)

plt.text(s1-.1,T1,f&amp;#39;(1)\nT = {round(float(T1),2)} K\nh = {round(float(h1),1)} kJ/kg\n s = {round(float(s1),3)} kJ/kgK&amp;#39;,
    ha=&amp;#39;right&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
plt.text(1.6,330,f&amp;#39;(2)\nT = {round(float(T2),2)} K\nh = {round(float(h2),1)} kJ/kg \ns = {round(float(s2),3)} kJ/kgK&amp;#39;,
    ha=&amp;#39;left&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
plt.text(s3+.1,T3,f&amp;#39;(3)\nT = {round(float(T3),2)} K\nh = {round(float(h3),1)} kJ/kg \ns = {round(float(s3),3)} kJ/kgK&amp;#39;,
    ha=&amp;#39;left&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
plt.text(s4+.1,T4,f&amp;#39;(4)\nT = {round(float(T4),2)} K\nh = {round(float(h4),1)} kJ/kg \ns = {round(float(s4),3)} kJ/kgK\nx = {round(float(x),3)}&amp;#39;,
    ha=&amp;#39;left&amp;#39;,backgroundcolor=&amp;#39;white&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Ideal-Rankine-Cycle/index_files/output_16_1.png&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>JSAE/SAE conference in Kyoto, Japan</title>
      <link>/post/jsae_conference/</link>
      <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/jsae_conference/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;NO&lt;sub&gt;x&lt;/sub&gt; emissions have become a health concern in cities with calls to reduce and ban vehicles with CI engines from entering the city. As such, our aim is to reduce NO&lt;sub&gt;x&lt;/sub&gt; emissions being produced by the CI engine, and Low Temperature Combustion (LTC) is seen as a viable option.&lt;/p&gt;
&lt;p&gt;LTC is a broad term used generally for combustion techniques where the overall peak combustion temperature is reduced. This is beneficial as it reduces the formation of NO&lt;sub&gt;x&lt;/sub&gt; exhaust gasses. LTC techniques include HCCI, PCCI and RCCI. Although NO&lt;sub&gt;x&lt;/sub&gt; emissions is reduced as a result of lower temperatures, other emissions such as CO emissions and HC emissions can increase due to incomplete combustion.&lt;/p&gt;
&lt;p&gt;There is thus a balance that needs to be optimised to ensure an overall reduction of all emissions. This research focussed on achieving emissions reduction by optimising EGR and the engineâ€™s fuel delivery.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/JSAE_conference/index_files/JSAE-PFL2019-effects-of-temperature-and-homogeneity.jpg&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For this research we looked at four parameters that can be used to achieve LTC and ultimately reduce NO&lt;sub&gt;x&lt;/sub&gt; and CO emissions. NO&lt;sub&gt;x&lt;/sub&gt; emissions is reduced by reducing the combustion temperature and CO emissions are reduced by increasing the homogeneity of the air fuel mixture. The table shown in the slide shows the effects on the combustion temperature and the homogeneity of the air fuel mixture as reported in the literature.&lt;/p&gt;
&lt;p&gt;If we increase pilot injection duration, then the homogeneity of the charge increases as more fuel is being introduced in the pilot injection and thus more of the fuel can mix with the air before combustion occurs. Premixed combustion also increases as a result of this, ultimately increasing the combustion temperature.&lt;/p&gt;
&lt;p&gt;If we advance the pilot injection start of injection (SOI), then the homogeneity of the charge is increased, as there is more time for the fuel to mix with the air before combustion occurs. Increased homogeneity also increases the premixed combustion, which increases the combustion temperature.&lt;/p&gt;
&lt;p&gt;If we advance the main injection SOI, then the time for the fuel to mix with the air is decreased, which reduces the homogeneity of the charge as well as the combustion temperature.&lt;/p&gt;
&lt;p&gt;If we increase the Exhaust gas recirculation (EGR) percentage, then the homogeneity of the charge is increased, as more EGR increases the ignition delay and gives the fuel more time to mix with the air. It also reduces the combustion temperature as more inert gasses are introduced into the inlet charge, which absorbs a lot of the heat.&lt;/p&gt;
&lt;p&gt;From this table, it can be seen that the four parameters have different effects on combustion temperature and charge homogeneity. It is thus necessary to determine which parameter has a significant effect on emissions formation and which parameter has a lesser effect.&lt;/p&gt;
&lt;p&gt;The Design of Experiment (DoE) statistical tool was used to determine the effect of each parameter on the formation of engine emissions and if it is significant or not. A DoE was also used to determine the impact of each parameter as well as determine an optimised point that resulted in overall reduced emissions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/JSAE_conference/index_files/JSAE-PFL2019-transient-vs-steady-state.jpg&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next we need to consider the drive cycle that will be used in the simulation. When we look at how past research has generated experimental emissions data, the majority of research found have used steady state engine operating points in their test methodology. The results from steady state experimentation cannot accurately represent real life scenarios. A transient drive cycle is needed to generate results that are comparable to real life. The WLTP was used in this research. It replaced the NEDC that has been used in the past to test the new vehicle entering the market.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/JSAE_conference/index_files/JSAE-PFL2019-transient-vs-steady-state-WLTP.jpg&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I have created this figure to further illustrate the benefits of using the WLTP for real world emissions investigation. The graph shows the WLTP, in grey circles, as a function of engine speed and BMEP. The red crosses indicate the steady state points used by past research to investigate engine emissions. When looking at the graph, clear gaps are evident in the engine operating map that is not covered by the research considered. The use of a transient drive cycle is thus appropriate if the results needed to be comparable to a real world scenario.&lt;/p&gt;
&lt;div id=&#34;methodology&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Methodology&lt;/h2&gt;
&lt;p&gt;An engine simulation was used to investigate the effects of varying the different engine operating parameters on engine emissions. A 2.4 L turbocharged CI engine was simulated. The simulationâ€™s combustion model was validated using in-cylinder pressure data and emissions data was used to validate its emissions models.&lt;/p&gt;
&lt;p&gt;The Wiebe combustion model was used in this research. Linear regression models was generated for the start of combustion crank angle degree (CAD), premixed fuel mass fraction burned and Wiebe exponent by using the cylinder pressure data. This is necessary as we are simulating a transient drive cycle as well as changing engine parameters that influence combustion.
The emission models were validated using exhaust gas analyser experimental data. The engine simulation can only simulate CO emissions and NO&lt;sub&gt;x&lt;/sub&gt; emissions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/JSAE_conference/index_files/JSAE-PFL2019-cylinder-pressure-graphs-validation.jpg&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;After the models were calibrated, it was compared to experimental data to check its accuracy. Here two cylinder pressure graphs are shown; one at 25% load and 1500rpm and the other at 75% load and 3000rpm. The experimental data is shown in a solid line and the simulated model is shown in dashed lines. As can be seen, the simulated results correlate well with the experimental data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/JSAE_conference/index_files/JSAE-PFL2019-emission-graphs-validation.jpg&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Same can be said of the simulated emissions. The simulated emission results for the CO emissions and NOx emissions correlate well with the experimental data. We thus have confidence in our simulation and can now move on to setting up the DoE.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/JSAE_conference/index_files/JSAE-PFL2019-DoE-setup-for-simulation.jpg&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When setting up the factorial design, a 2^4 factorial design was chosen as there are 4 parameters that will be investigated. These are EGR percentage, pilot injection duration and main and pilot injection SOI. The test engine is using an aftermarket ECU, which have operating maps loaded onto it by default. These operating maps are used as the starting point for the DoE. The EGR percentage map is in the form of an island with maximum EGR at approximately 2500 rpm and 10 % throttle position. Here is an example of an EGR map with 47% as the maximum percentage. The value as given by the DoE will always be the maximum value and the maps will be scaled according to the maximum value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/JSAE_conference/index_files/JSAE-PFL2019-first-factorial-design.jpg&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Shown here is a table with the low and high values of the first factorial design.
The EGR percentage has a low and high value of 0 % and 10 %, pilot injection and main injection SOI is advanced by one CAD and retarded by 1 CAD. The pilot injection duration is decreased by 100 Î¼s and increased by 100 Î¼s. Similar tables were created for the second and third factorial designs based on the results from the previous factorial design.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/JSAE_conference/index_files/JSAE-PFL2019-generation-of-next-factorial-designs.jpg&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In order to determine the configuration that will reduce emissions the most, we opted to follow the path of greatest emission reduction using multiple factorial designs. After each factorial design, The desirability function was used to determine the best configuration of the parameters under investigation. This then was used to set up the next factorial design. This can be explained in the figure shown.&lt;/p&gt;
&lt;p&gt;The figure shows the three factorial designs for two parameters, pilot injection SOI and EGR percentage. As can be seen for the first factorial design, the EGR is varied from 0 % to 10 % and the pilot injection SOI is advanced and retarded by 1 CAD. Once the first factorial design is completed, the desirability function is used to determine which configuration reduces the emissions the most. In this case it is an EGR percentage of 10 % and by retarding the pilot injection SOI by 1 CAD. The low and high values of the second factorial design can now be determined with the use of the two equations shown on the slide.&lt;/p&gt;
&lt;p&gt;As a maximum desirability (D&lt;sub&gt;i&lt;/sub&gt;) is achieved at 10 % EGR, the second factorial designâ€™s low value becomes 10 % and the high level value for the second factorial design becomes 25 %. For the pilot injection SOI, the second factorial designâ€™s low value is set to retard the map by 1 CAD and the high values is set to retard the operating map by 4 CADs.&lt;/p&gt;
&lt;p&gt;Once the second factorial design is finished, the desirability function is used again to determine which configuration results in the reducing the emissions the most. This results in a EGR percentage of 25 % and retarding the pilot injection SOI by 2 CADs. As such the low and high values for the EGR percentage for the third factorial design is calculated as 25 % and 47.5%. The pilot injection SOI low and high values for the third factorial design stays at retarding the maps with 1 CAD and 4 CADs.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;results-and-discussion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Results and discussion&lt;/h2&gt;
&lt;p&gt;Shown on this slide is the desirability function plot for the third factorial design that was simulated. As can be seen, by the third factorial design, the start of injection for the pilot and main injection and the injection duration of the pilot injection does not significantly influence the emissions. This can be seen by the almost horizontal lines of the graph.&lt;/p&gt;
&lt;p&gt;The EGR percentage has a significant effect on the NO&lt;sub&gt;x&lt;/sub&gt; emissions and CO emissions as the graph lines have a steep gradient. The desirability function plot at the top in the form of a half circle indicate that the maximum desirability value will be reached for an EGR percentage at approximately 36 %.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/JSAE_conference/index_files/JSAE-PFL2019-emissions-results.jpg&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When we put all the factorial designsâ€™ results on one graph, we can get a better overall picture.
For the second factorial design, we optimised towards a maximum of CO emissions as per the Euro 4 limits. This resulted in a reduction of approximately 20% of NO&lt;sub&gt;x&lt;/sub&gt; when we use a maximum of 12% EGR.&lt;/p&gt;
&lt;p&gt;To further investigate LTC, for the third factorial design, we opted to continue to increase the EGR percentage to 47.5%. This resulted in a reduction in NO&lt;sub&gt;x&lt;/sub&gt; of 85% to 0.55g/km where the Euro 4 limit is 0.25g/km. The CO emissions greatly increased as a result of the EGR percentage increasing, to 22.58g/km.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/JSAE_conference/index_files/JSAE-PFL2019-check-for-LTC.jpg&#34; style=&#34;width:80.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next we wanted to see if we achieved LTC. This graph shows the peak temperature for combustion with no LTC techniques used as well as for the combustion temperature for the third factorial design. The difference in peak temperature between the two graphs is approximately 100 Â°K.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NO&lt;sub&gt;x&lt;/sub&gt; emissions were reduced by approximately 85% with an EGR percentage of 47.5 %, retarding the pilot injection and main injection SOI by 1 CAD and increasing the pilot injection duration by 200 Î¼s.&lt;/li&gt;
&lt;li&gt;NO&lt;sub&gt;x&lt;/sub&gt; emissions reduced by approximately 20 % with the use of 12 % EGR without exceeding the Euro 4 CO emissions limit.&lt;/li&gt;
&lt;li&gt;Low temperature combustion was achieved&lt;/li&gt;
&lt;li&gt;The method of using DoE to minimise engine out emissions was successful&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;limitations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Limitations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The sample size of the experimental data is modest. By using more experimental data, more robust regression models can be constructed.&lt;/li&gt;
&lt;li&gt;A blind transient comparison between simulation and experimental results would be beneficial and increase our confidence in our engine simulation.&lt;/li&gt;
&lt;li&gt;Following the path of greatest emission reduction, was successful, but it can result in finding a local minimum, where we want to determine the global minimum.&lt;/li&gt;
&lt;li&gt;The DoE can be improved by investigate the whole operating map of the engine to ensure that we will be able to determine the global minimum.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
